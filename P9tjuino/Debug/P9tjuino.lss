
P9tjuino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800200  00000320  000003b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000320  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800234  00800234  000003e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000418  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001269  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ea9  00000000  00000000  00001799  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000740  00000000  00000000  00002642  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  00002d84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000621  00000000  00000000  00002f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006b3  00000000  00000000  00003575  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003c28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8c c0       	rjmp	.+280    	; 0x11e <__bad_interrupt>
   6:	00 00       	nop
   8:	8a c0       	rjmp	.+276    	; 0x11e <__bad_interrupt>
   a:	00 00       	nop
   c:	88 c0       	rjmp	.+272    	; 0x11e <__bad_interrupt>
   e:	00 00       	nop
  10:	86 c0       	rjmp	.+268    	; 0x11e <__bad_interrupt>
  12:	00 00       	nop
  14:	84 c0       	rjmp	.+264    	; 0x11e <__bad_interrupt>
  16:	00 00       	nop
  18:	82 c0       	rjmp	.+260    	; 0x11e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	80 c0       	rjmp	.+256    	; 0x11e <__bad_interrupt>
  1e:	00 00       	nop
  20:	7e c0       	rjmp	.+252    	; 0x11e <__bad_interrupt>
  22:	00 00       	nop
  24:	7c c0       	rjmp	.+248    	; 0x11e <__bad_interrupt>
  26:	00 00       	nop
  28:	7a c0       	rjmp	.+244    	; 0x11e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	78 c0       	rjmp	.+240    	; 0x11e <__bad_interrupt>
  2e:	00 00       	nop
  30:	76 c0       	rjmp	.+236    	; 0x11e <__bad_interrupt>
  32:	00 00       	nop
  34:	14 c1       	rjmp	.+552    	; 0x25e <__vector_13>
  36:	00 00       	nop
  38:	72 c0       	rjmp	.+228    	; 0x11e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	70 c0       	rjmp	.+224    	; 0x11e <__bad_interrupt>
  3e:	00 00       	nop
  40:	6e c0       	rjmp	.+220    	; 0x11e <__bad_interrupt>
  42:	00 00       	nop
  44:	6c c0       	rjmp	.+216    	; 0x11e <__bad_interrupt>
  46:	00 00       	nop
  48:	6a c0       	rjmp	.+212    	; 0x11e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	68 c0       	rjmp	.+208    	; 0x11e <__bad_interrupt>
  4e:	00 00       	nop
  50:	66 c0       	rjmp	.+204    	; 0x11e <__bad_interrupt>
  52:	00 00       	nop
  54:	64 c0       	rjmp	.+200    	; 0x11e <__bad_interrupt>
  56:	00 00       	nop
  58:	62 c0       	rjmp	.+196    	; 0x11e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	60 c0       	rjmp	.+192    	; 0x11e <__bad_interrupt>
  5e:	00 00       	nop
  60:	5e c0       	rjmp	.+188    	; 0x11e <__bad_interrupt>
  62:	00 00       	nop
  64:	5c c0       	rjmp	.+184    	; 0x11e <__bad_interrupt>
  66:	00 00       	nop
  68:	5a c0       	rjmp	.+180    	; 0x11e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	58 c0       	rjmp	.+176    	; 0x11e <__bad_interrupt>
  6e:	00 00       	nop
  70:	56 c0       	rjmp	.+172    	; 0x11e <__bad_interrupt>
  72:	00 00       	nop
  74:	54 c0       	rjmp	.+168    	; 0x11e <__bad_interrupt>
  76:	00 00       	nop
  78:	52 c0       	rjmp	.+164    	; 0x11e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	50 c0       	rjmp	.+160    	; 0x11e <__bad_interrupt>
  7e:	00 00       	nop
  80:	4e c0       	rjmp	.+156    	; 0x11e <__bad_interrupt>
  82:	00 00       	nop
  84:	4c c0       	rjmp	.+152    	; 0x11e <__bad_interrupt>
  86:	00 00       	nop
  88:	4a c0       	rjmp	.+148    	; 0x11e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	48 c0       	rjmp	.+144    	; 0x11e <__bad_interrupt>
  8e:	00 00       	nop
  90:	46 c0       	rjmp	.+140    	; 0x11e <__bad_interrupt>
  92:	00 00       	nop
  94:	44 c0       	rjmp	.+136    	; 0x11e <__bad_interrupt>
  96:	00 00       	nop
  98:	42 c0       	rjmp	.+132    	; 0x11e <__bad_interrupt>
  9a:	00 00       	nop
  9c:	40 c0       	rjmp	.+128    	; 0x11e <__bad_interrupt>
  9e:	00 00       	nop
  a0:	3e c0       	rjmp	.+124    	; 0x11e <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3c c0       	rjmp	.+120    	; 0x11e <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3a c0       	rjmp	.+116    	; 0x11e <__bad_interrupt>
  aa:	00 00       	nop
  ac:	38 c0       	rjmp	.+112    	; 0x11e <__bad_interrupt>
  ae:	00 00       	nop
  b0:	36 c0       	rjmp	.+108    	; 0x11e <__bad_interrupt>
  b2:	00 00       	nop
  b4:	34 c0       	rjmp	.+104    	; 0x11e <__bad_interrupt>
  b6:	00 00       	nop
  b8:	32 c0       	rjmp	.+100    	; 0x11e <__bad_interrupt>
  ba:	00 00       	nop
  bc:	30 c0       	rjmp	.+96     	; 0x11e <__bad_interrupt>
  be:	00 00       	nop
  c0:	2e c0       	rjmp	.+92     	; 0x11e <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2c c0       	rjmp	.+88     	; 0x11e <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2a c0       	rjmp	.+84     	; 0x11e <__bad_interrupt>
  ca:	00 00       	nop
  cc:	28 c0       	rjmp	.+80     	; 0x11e <__bad_interrupt>
  ce:	00 00       	nop
  d0:	26 c0       	rjmp	.+76     	; 0x11e <__bad_interrupt>
  d2:	00 00       	nop
  d4:	24 c0       	rjmp	.+72     	; 0x11e <__bad_interrupt>
  d6:	00 00       	nop
  d8:	22 c0       	rjmp	.+68     	; 0x11e <__bad_interrupt>
  da:	00 00       	nop
  dc:	20 c0       	rjmp	.+64     	; 0x11e <__bad_interrupt>
  de:	00 00       	nop
  e0:	1e c0       	rjmp	.+60     	; 0x11e <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	e0 e2       	ldi	r30, 0x20	; 32
  f8:	f3 e0       	ldi	r31, 0x03	; 3
  fa:	00 e0       	ldi	r16, 0x00	; 0
  fc:	0b bf       	out	0x3b, r16	; 59
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
 100:	07 90       	elpm	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	a4 33       	cpi	r26, 0x34	; 52
 106:	b1 07       	cpc	r27, r17
 108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
 10a:	22 e0       	ldi	r18, 0x02	; 2
 10c:	a4 e3       	ldi	r26, 0x34	; 52
 10e:	b2 e0       	ldi	r27, 0x02	; 2
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	a6 33       	cpi	r26, 0x36	; 54
 116:	b2 07       	cpc	r27, r18
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	64 d0       	rcall	.+200    	; 0x1e4 <main>
 11c:	ff c0       	rjmp	.+510    	; 0x31c <_exit>

0000011e <__bad_interrupt>:
 11e:	70 cf       	rjmp	.-288    	; 0x0 <__vectors>

00000120 <Clock_Update>:
	seg=segundos;
	min=minutos;
	horas=hora;
}
void Clock_Update( void ){
	seg=(++seg%60);
 120:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <seg>
 124:	9f 5f       	subi	r25, 0xFF	; 255
 126:	89 e8       	ldi	r24, 0x89	; 137
 128:	98 9f       	mul	r25, r24
 12a:	81 2d       	mov	r24, r1
 12c:	11 24       	eor	r1, r1
 12e:	82 95       	swap	r24
 130:	86 95       	lsr	r24
 132:	87 70       	andi	r24, 0x07	; 7
 134:	2c e3       	ldi	r18, 0x3C	; 60
 136:	82 9f       	mul	r24, r18
 138:	90 19       	sub	r25, r0
 13a:	11 24       	eor	r1, r1
 13c:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <seg>
	if(seg == 0)
 140:	91 11       	cpse	r25, r1
 142:	21 c0       	rjmp	.+66     	; 0x186 <Clock_Update+0x66>
	{
		min=(++min%60);
 144:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <min>
 148:	9f 5f       	subi	r25, 0xFF	; 255
 14a:	89 e8       	ldi	r24, 0x89	; 137
 14c:	98 9f       	mul	r25, r24
 14e:	81 2d       	mov	r24, r1
 150:	11 24       	eor	r1, r1
 152:	82 95       	swap	r24
 154:	86 95       	lsr	r24
 156:	87 70       	andi	r24, 0x07	; 7
 158:	2c e3       	ldi	r18, 0x3C	; 60
 15a:	82 9f       	mul	r24, r18
 15c:	90 19       	sub	r25, r0
 15e:	11 24       	eor	r1, r1
 160:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <min>
		if(min == 0)
 164:	91 11       	cpse	r25, r1
 166:	0f c0       	rjmp	.+30     	; 0x186 <Clock_Update+0x66>
		{
			horas=(++horas%24);
 168:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 16c:	8f 5f       	subi	r24, 0xFF	; 255
 16e:	9b ea       	ldi	r25, 0xAB	; 171
 170:	89 9f       	mul	r24, r25
 172:	91 2d       	mov	r25, r1
 174:	11 24       	eor	r1, r1
 176:	92 95       	swap	r25
 178:	9f 70       	andi	r25, 0x0F	; 15
 17a:	28 e1       	ldi	r18, 0x18	; 24
 17c:	92 9f       	mul	r25, r18
 17e:	80 19       	sub	r24, r0
 180:	11 24       	eor	r1, r1
 182:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
 186:	08 95       	ret

00000188 <PrintDec2d>:
	UART0_putchar(':');
	PrintDec2d(min);
	UART0_putchar(':');
	PrintDec2d(seg);
}
void PrintDec2d( BYTE dato){
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	d8 2f       	mov	r29, r24
	UART0_putchar( dato/10 +'0'); /* Imprime decenas */
 18e:	cd ec       	ldi	r28, 0xCD	; 205
 190:	8c 9f       	mul	r24, r28
 192:	c1 2d       	mov	r28, r1
 194:	11 24       	eor	r1, r1
 196:	c6 95       	lsr	r28
 198:	c6 95       	lsr	r28
 19a:	c6 95       	lsr	r28
 19c:	80 e3       	ldi	r24, 0x30	; 48
 19e:	8c 0f       	add	r24, r28
 1a0:	a7 d0       	rcall	.+334    	; 0x2f0 <UART0_putchar>
	UART0_putchar( dato%10 +'0'); /* Imprime unidades */
 1a2:	cc 0f       	add	r28, r28
 1a4:	8c 2f       	mov	r24, r28
 1a6:	88 0f       	add	r24, r24
 1a8:	88 0f       	add	r24, r24
 1aa:	c8 0f       	add	r28, r24
 1ac:	8d 2f       	mov	r24, r29
 1ae:	8c 1b       	sub	r24, r28
 1b0:	80 5d       	subi	r24, 0xD0	; 208
 1b2:	9e d0       	rcall	.+316    	; 0x2f0 <UART0_putchar>
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <Clock_Display>:
		}
	}
}
void Clock_Display( void ){
	/* imprimir reloj en formato "hh:mm:ss" */;
	UART0_putchar(10);
 1ba:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putchar(13);
 1bc:	99 d0       	rcall	.+306    	; 0x2f0 <UART0_putchar>
 1be:	8d e0       	ldi	r24, 0x0D	; 13
	PrintDec2d(horas);
 1c0:	97 d0       	rcall	.+302    	; 0x2f0 <UART0_putchar>
 1c2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
	UART0_putchar(':');
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	df df       	rcall	.-66     	; 0x188 <PrintDec2d>
	PrintDec2d(min);
 1ca:	8a e3       	ldi	r24, 0x3A	; 58
 1cc:	91 d0       	rcall	.+290    	; 0x2f0 <UART0_putchar>
 1ce:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <min>
	UART0_putchar(':');
 1d2:	90 e0       	ldi	r25, 0x00	; 0
	PrintDec2d(seg);
 1d4:	d9 df       	rcall	.-78     	; 0x188 <PrintDec2d>
 1d6:	8a e3       	ldi	r24, 0x3A	; 58
 1d8:	8b d0       	rcall	.+278    	; 0x2f0 <UART0_putchar>
 1da:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <seg>
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	d3 cf       	rjmp	.-90     	; 0x188 <PrintDec2d>
 1e2:	08 95       	ret

000001e4 <main>:
#include "Clock.h"


int main(void)
{
	UART0_Init(0);
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	90 e0       	ldi	r25, 0x00	; 0
	Timer2_Init(4);
 1e8:	6a d0       	rcall	.+212    	; 0x2be <UART0_Init>
 1ea:	84 e0       	ldi	r24, 0x04	; 4
 1ec:	01 d0       	rcall	.+2      	; 0x1f0 <Timer2_Init>
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <main+0xa>

000001f0 <Timer2_Init>:
	4. To switch to asynchronous operation: Wait for TCN2UB, OCR2xUB, and TCR2xUB.
	5. Clear the Timer/Counter2 Interrupt Flags.
	6. Enable interrupts, if needed.
	*/
	
	TIMSK2 = 0;							//Clear a interrupciones timer2
 1f0:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	ASSR = (1<<AS2);					//Clock externo seleccionado
 1f4:	90 e2       	ldi	r25, 0x20	; 32
 1f6:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	OCR2A = 256-1;						//TOP
 1fa:	9f ef       	ldi	r25, 0xFF	; 255
 1fc:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	TCNT2 = 0;							//Contador inicializado en 0
 200:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	TCCR2A = (1<<WGM21);					//CTC mode				
 204:	92 e0       	ldi	r25, 0x02	; 2
 206:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	TCCR2B = (5<<CS20);					// PS 128
 20a:	95 e0       	ldi	r25, 0x05	; 5
 20c:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	while( (ASSR&((1<<TCN2UB)|(1<<OCR2AUB)|(1<<OCR2BUB)|(1<<TCR2AUB)|(1<<TCR2BUB))) );
 210:	e6 eb       	ldi	r30, 0xB6	; 182
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	90 81       	ld	r25, Z
 216:	9f 71       	andi	r25, 0x1F	; 31
 218:	e9 f7       	brne	.-6      	; 0x214 <Timer2_Init+0x24>
	TIFR2 = (7<<TOV2);					//Se borran en alto las banderas de interrupcion
 21a:	97 e0       	ldi	r25, 0x07	; 7
 21c:	97 bb       	out	0x17, r25	; 23
	TIMSK2 = (1<<OCIE2A);				//Interrupt compare A enable
 21e:	92 e0       	ldi	r25, 0x02	; 2
 220:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	sei();								//habilita interrupciones (global) */
 224:	78 94       	sei
	if((baseT>=1) && (baseT<=8))
 226:	9f ef       	ldi	r25, 0xFF	; 255
 228:	98 0f       	add	r25, r24
 22a:	98 30       	cpi	r25, 0x08	; 8
 22c:	18 f4       	brcc	.+6      	; 0x234 <Timer2_Init+0x44>
	{
		Flag = baseT;						//segundos a los cuales llegar	
 22e:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <Flag>
 232:	06 c0       	rjmp	.+12     	; 0x240 <Timer2_Init+0x50>
	}else
	{
		UART0_puts("\n\rSeg no permitidos, 1seg seleccionado default\n\r");
 234:	83 e0       	ldi	r24, 0x03	; 3
 236:	92 e0       	ldi	r25, 0x02	; 2
 238:	63 d0       	rcall	.+198    	; 0x300 <UART0_puts>
		Flag = 1;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <Flag>
	}
	base = 0;
 240:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <__data_end>
 244:	08 95       	ret

00000246 <Timer2_Flag>:
}
uint8_t Timer2_Flag ( void )
{
	if( Flag == base ){
 246:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <Flag>
 24a:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <__data_end>
 24e:	98 13       	cpse	r25, r24
 250:	04 c0       	rjmp	.+8      	; 0x25a <Timer2_Flag+0x14>
		base = 0;
 252:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <__data_end>
		return 1;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	08 95       	ret
	}
	else{
	
		return 0;
 25a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 25c:	08 95       	ret

0000025e <__vector_13>:
ISR (TIMER2_COMPA_vect)
{ 
 25e:	1f 92       	push	r1
 260:	0f 92       	push	r0
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	0f 92       	push	r0
 266:	11 24       	eor	r1, r1
 268:	0b b6       	in	r0, 0x3b	; 59
 26a:	0f 92       	push	r0
 26c:	2f 93       	push	r18
 26e:	3f 93       	push	r19
 270:	4f 93       	push	r20
 272:	5f 93       	push	r21
 274:	6f 93       	push	r22
 276:	7f 93       	push	r23
 278:	8f 93       	push	r24
 27a:	9f 93       	push	r25
 27c:	af 93       	push	r26
 27e:	bf 93       	push	r27
 280:	ef 93       	push	r30
 282:	ff 93       	push	r31
	base++;
 284:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <__data_end>
 288:	8f 5f       	subi	r24, 0xFF	; 255
 28a:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <__data_end>
	if(Timer2_Flag())
	{
		Clock_Update();
 28e:	db df       	rcall	.-74     	; 0x246 <Timer2_Flag>
		Clock_Display();
 290:	88 23       	and	r24, r24
 292:	11 f0       	breq	.+4      	; 0x298 <__vector_13+0x3a>
	}
 294:	45 df       	rcall	.-374    	; 0x120 <Clock_Update>
 296:	91 df       	rcall	.-222    	; 0x1ba <Clock_Display>
 298:	ff 91       	pop	r31
 29a:	ef 91       	pop	r30
 29c:	bf 91       	pop	r27
 29e:	af 91       	pop	r26
 2a0:	9f 91       	pop	r25
 2a2:	8f 91       	pop	r24
 2a4:	7f 91       	pop	r23
 2a6:	6f 91       	pop	r22
 2a8:	5f 91       	pop	r21
 2aa:	4f 91       	pop	r20
 2ac:	3f 91       	pop	r19
 2ae:	2f 91       	pop	r18
 2b0:	0f 90       	pop	r0
 2b2:	0b be       	out	0x3b, r0	; 59
 2b4:	0f 90       	pop	r0
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	0f 90       	pop	r0
 2ba:	1f 90       	pop	r1
 2bc:	18 95       	reti

000002be <UART0_Init>:
			*str--='\0';
			i--;
		}
	}while(c != 13);
	*str = '\0';
}
 2be:	22 e0       	ldi	r18, 0x02	; 2
 2c0:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 2c4:	28 e1       	ldi	r18, 0x18	; 24
 2c6:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 2ca:	26 e0       	ldi	r18, 0x06	; 6
 2cc:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 2d0:	89 2b       	or	r24, r25
 2d2:	39 f4       	brne	.+14     	; 0x2e2 <UART0_Init+0x24>
 2d4:	8f ec       	ldi	r24, 0xCF	; 207
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 2dc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 2e0:	08 95       	ret
 2e2:	87 e6       	ldi	r24, 0x67	; 103
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 2ea:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 2ee:	08 95       	ret

000002f0 <UART0_putchar>:
 2f0:	e0 ec       	ldi	r30, 0xC0	; 192
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	90 81       	ld	r25, Z
 2f6:	95 ff       	sbrs	r25, 5
 2f8:	fd cf       	rjmp	.-6      	; 0x2f4 <UART0_putchar+0x4>
 2fa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2fe:	08 95       	ret

00000300 <UART0_puts>:
void UART0_puts(char *str)
{
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	ec 01       	movw	r28, r24
	while(*str)
 306:	88 81       	ld	r24, Y
 308:	88 23       	and	r24, r24
 30a:	29 f0       	breq	.+10     	; 0x316 <UART0_puts+0x16>
	{
		UART0_putchar(*str++);
 30c:	21 96       	adiw	r28, 0x01	; 1
	}while(c != 13);
	*str = '\0';
}
void UART0_puts(char *str)
{
	while(*str)
 30e:	f0 df       	rcall	.-32     	; 0x2f0 <UART0_putchar>
 310:	89 91       	ld	r24, Y+
 312:	81 11       	cpse	r24, r1
	{
		UART0_putchar(*str++);
	}
}
 314:	fc cf       	rjmp	.-8      	; 0x30e <UART0_puts+0xe>
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	08 95       	ret

0000031c <_exit>:
 31c:	f8 94       	cli

0000031e <__stop_program>:
 31e:	ff cf       	rjmp	.-2      	; 0x31e <__stop_program>
