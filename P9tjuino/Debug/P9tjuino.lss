
P9tjuino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  000002c4  00000358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800206  00800206  0000035e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000035e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001261  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eb7  00000000  00000000  00001709  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006fe  00000000  00000000  000025c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  00002cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061e  00000000  00000000  00002e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000692  00000000  00000000  000034ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003b40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8c c0       	rjmp	.+280    	; 0x11e <__bad_interrupt>
   6:	00 00       	nop
   8:	8a c0       	rjmp	.+276    	; 0x11e <__bad_interrupt>
   a:	00 00       	nop
   c:	88 c0       	rjmp	.+272    	; 0x11e <__bad_interrupt>
   e:	00 00       	nop
  10:	86 c0       	rjmp	.+268    	; 0x11e <__bad_interrupt>
  12:	00 00       	nop
  14:	84 c0       	rjmp	.+264    	; 0x11e <__bad_interrupt>
  16:	00 00       	nop
  18:	82 c0       	rjmp	.+260    	; 0x11e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	80 c0       	rjmp	.+256    	; 0x11e <__bad_interrupt>
  1e:	00 00       	nop
  20:	7e c0       	rjmp	.+252    	; 0x11e <__bad_interrupt>
  22:	00 00       	nop
  24:	7c c0       	rjmp	.+248    	; 0x11e <__bad_interrupt>
  26:	00 00       	nop
  28:	7a c0       	rjmp	.+244    	; 0x11e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	78 c0       	rjmp	.+240    	; 0x11e <__bad_interrupt>
  2e:	00 00       	nop
  30:	76 c0       	rjmp	.+236    	; 0x11e <__bad_interrupt>
  32:	00 00       	nop
  34:	74 c0       	rjmp	.+232    	; 0x11e <__bad_interrupt>
  36:	00 00       	nop
  38:	72 c0       	rjmp	.+228    	; 0x11e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	df c0       	rjmp	.+446    	; 0x1fc <__vector_15>
  3e:	00 00       	nop
  40:	6e c0       	rjmp	.+220    	; 0x11e <__bad_interrupt>
  42:	00 00       	nop
  44:	6c c0       	rjmp	.+216    	; 0x11e <__bad_interrupt>
  46:	00 00       	nop
  48:	6a c0       	rjmp	.+212    	; 0x11e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	68 c0       	rjmp	.+208    	; 0x11e <__bad_interrupt>
  4e:	00 00       	nop
  50:	66 c0       	rjmp	.+204    	; 0x11e <__bad_interrupt>
  52:	00 00       	nop
  54:	64 c0       	rjmp	.+200    	; 0x11e <__bad_interrupt>
  56:	00 00       	nop
  58:	62 c0       	rjmp	.+196    	; 0x11e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	60 c0       	rjmp	.+192    	; 0x11e <__bad_interrupt>
  5e:	00 00       	nop
  60:	5e c0       	rjmp	.+188    	; 0x11e <__bad_interrupt>
  62:	00 00       	nop
  64:	5c c0       	rjmp	.+184    	; 0x11e <__bad_interrupt>
  66:	00 00       	nop
  68:	5a c0       	rjmp	.+180    	; 0x11e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	58 c0       	rjmp	.+176    	; 0x11e <__bad_interrupt>
  6e:	00 00       	nop
  70:	56 c0       	rjmp	.+172    	; 0x11e <__bad_interrupt>
  72:	00 00       	nop
  74:	54 c0       	rjmp	.+168    	; 0x11e <__bad_interrupt>
  76:	00 00       	nop
  78:	52 c0       	rjmp	.+164    	; 0x11e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	50 c0       	rjmp	.+160    	; 0x11e <__bad_interrupt>
  7e:	00 00       	nop
  80:	4e c0       	rjmp	.+156    	; 0x11e <__bad_interrupt>
  82:	00 00       	nop
  84:	4c c0       	rjmp	.+152    	; 0x11e <__bad_interrupt>
  86:	00 00       	nop
  88:	4a c0       	rjmp	.+148    	; 0x11e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	48 c0       	rjmp	.+144    	; 0x11e <__bad_interrupt>
  8e:	00 00       	nop
  90:	46 c0       	rjmp	.+140    	; 0x11e <__bad_interrupt>
  92:	00 00       	nop
  94:	44 c0       	rjmp	.+136    	; 0x11e <__bad_interrupt>
  96:	00 00       	nop
  98:	42 c0       	rjmp	.+132    	; 0x11e <__bad_interrupt>
  9a:	00 00       	nop
  9c:	40 c0       	rjmp	.+128    	; 0x11e <__bad_interrupt>
  9e:	00 00       	nop
  a0:	3e c0       	rjmp	.+124    	; 0x11e <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3c c0       	rjmp	.+120    	; 0x11e <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3a c0       	rjmp	.+116    	; 0x11e <__bad_interrupt>
  aa:	00 00       	nop
  ac:	38 c0       	rjmp	.+112    	; 0x11e <__bad_interrupt>
  ae:	00 00       	nop
  b0:	36 c0       	rjmp	.+108    	; 0x11e <__bad_interrupt>
  b2:	00 00       	nop
  b4:	34 c0       	rjmp	.+104    	; 0x11e <__bad_interrupt>
  b6:	00 00       	nop
  b8:	32 c0       	rjmp	.+100    	; 0x11e <__bad_interrupt>
  ba:	00 00       	nop
  bc:	30 c0       	rjmp	.+96     	; 0x11e <__bad_interrupt>
  be:	00 00       	nop
  c0:	2e c0       	rjmp	.+92     	; 0x11e <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2c c0       	rjmp	.+88     	; 0x11e <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2a c0       	rjmp	.+84     	; 0x11e <__bad_interrupt>
  ca:	00 00       	nop
  cc:	28 c0       	rjmp	.+80     	; 0x11e <__bad_interrupt>
  ce:	00 00       	nop
  d0:	26 c0       	rjmp	.+76     	; 0x11e <__bad_interrupt>
  d2:	00 00       	nop
  d4:	24 c0       	rjmp	.+72     	; 0x11e <__bad_interrupt>
  d6:	00 00       	nop
  d8:	22 c0       	rjmp	.+68     	; 0x11e <__bad_interrupt>
  da:	00 00       	nop
  dc:	20 c0       	rjmp	.+64     	; 0x11e <__bad_interrupt>
  de:	00 00       	nop
  e0:	1e c0       	rjmp	.+60     	; 0x11e <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	e4 ec       	ldi	r30, 0xC4	; 196
  f8:	f2 e0       	ldi	r31, 0x02	; 2
  fa:	00 e0       	ldi	r16, 0x00	; 0
  fc:	0b bf       	out	0x3b, r16	; 59
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
 100:	07 90       	elpm	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	a6 30       	cpi	r26, 0x06	; 6
 106:	b1 07       	cpc	r27, r17
 108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
 10a:	22 e0       	ldi	r18, 0x02	; 2
 10c:	a6 e0       	ldi	r26, 0x06	; 6
 10e:	b2 e0       	ldi	r27, 0x02	; 2
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	a7 30       	cpi	r26, 0x07	; 7
 116:	b2 07       	cpc	r27, r18
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	64 d0       	rcall	.+200    	; 0x1e4 <main>
 11c:	d1 c0       	rjmp	.+418    	; 0x2c0 <_exit>

0000011e <__bad_interrupt>:
 11e:	70 cf       	rjmp	.-288    	; 0x0 <__vectors>

00000120 <Clock_Update>:
	seg=segundos;
	min=minutos;
	horas=hora;
}
void Clock_Update( void ){
	seg=(++seg%60);
 120:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <seg>
 124:	9f 5f       	subi	r25, 0xFF	; 255
 126:	89 e8       	ldi	r24, 0x89	; 137
 128:	98 9f       	mul	r25, r24
 12a:	81 2d       	mov	r24, r1
 12c:	11 24       	eor	r1, r1
 12e:	82 95       	swap	r24
 130:	86 95       	lsr	r24
 132:	87 70       	andi	r24, 0x07	; 7
 134:	2c e3       	ldi	r18, 0x3C	; 60
 136:	82 9f       	mul	r24, r18
 138:	90 19       	sub	r25, r0
 13a:	11 24       	eor	r1, r1
 13c:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <seg>
	if(seg == 0)
 140:	91 11       	cpse	r25, r1
 142:	21 c0       	rjmp	.+66     	; 0x186 <Clock_Update+0x66>
	{
		min=(++min%60);
 144:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <min>
 148:	9f 5f       	subi	r25, 0xFF	; 255
 14a:	89 e8       	ldi	r24, 0x89	; 137
 14c:	98 9f       	mul	r25, r24
 14e:	81 2d       	mov	r24, r1
 150:	11 24       	eor	r1, r1
 152:	82 95       	swap	r24
 154:	86 95       	lsr	r24
 156:	87 70       	andi	r24, 0x07	; 7
 158:	2c e3       	ldi	r18, 0x3C	; 60
 15a:	82 9f       	mul	r24, r18
 15c:	90 19       	sub	r25, r0
 15e:	11 24       	eor	r1, r1
 160:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <min>
		if(min == 0)
 164:	91 11       	cpse	r25, r1
 166:	0f c0       	rjmp	.+30     	; 0x186 <Clock_Update+0x66>
		{
			horas=(++horas%24);
 168:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 16c:	8f 5f       	subi	r24, 0xFF	; 255
 16e:	9b ea       	ldi	r25, 0xAB	; 171
 170:	89 9f       	mul	r24, r25
 172:	91 2d       	mov	r25, r1
 174:	11 24       	eor	r1, r1
 176:	92 95       	swap	r25
 178:	9f 70       	andi	r25, 0x0F	; 15
 17a:	28 e1       	ldi	r18, 0x18	; 24
 17c:	92 9f       	mul	r25, r18
 17e:	80 19       	sub	r24, r0
 180:	11 24       	eor	r1, r1
 182:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
 186:	08 95       	ret

00000188 <PrintDec2d>:
	UART0_putchar(':');
	PrintDec2d(min);
	UART0_putchar(':');
	PrintDec2d(seg);
}
void PrintDec2d( BYTE dato){
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	d8 2f       	mov	r29, r24
	UART0_putchar( dato/10 +'0'); /* Imprime decenas */
 18e:	cd ec       	ldi	r28, 0xCD	; 205
 190:	8c 9f       	mul	r24, r28
 192:	c1 2d       	mov	r28, r1
 194:	11 24       	eor	r1, r1
 196:	c6 95       	lsr	r28
 198:	c6 95       	lsr	r28
 19a:	c6 95       	lsr	r28
 19c:	80 e3       	ldi	r24, 0x30	; 48
 19e:	8c 0f       	add	r24, r28
 1a0:	79 d0       	rcall	.+242    	; 0x294 <UART0_putchar>
	UART0_putchar( dato%10 +'0'); /* Imprime unidades */
 1a2:	cc 0f       	add	r28, r28
 1a4:	8c 2f       	mov	r24, r28
 1a6:	88 0f       	add	r24, r24
 1a8:	88 0f       	add	r24, r24
 1aa:	c8 0f       	add	r28, r24
 1ac:	8d 2f       	mov	r24, r29
 1ae:	8c 1b       	sub	r24, r28
 1b0:	80 5d       	subi	r24, 0xD0	; 208
 1b2:	70 d0       	rcall	.+224    	; 0x294 <UART0_putchar>
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <Clock_Display>:
		}
	}
}
void Clock_Display( void ){
	/* imprimir reloj en formato "hh:mm:ss" */;
	UART0_putchar(10);
 1ba:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putchar(13);
 1bc:	6b d0       	rcall	.+214    	; 0x294 <UART0_putchar>
 1be:	8d e0       	ldi	r24, 0x0D	; 13
	PrintDec2d(horas);
 1c0:	69 d0       	rcall	.+210    	; 0x294 <UART0_putchar>
 1c2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
	UART0_putchar(':');
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	df df       	rcall	.-66     	; 0x188 <PrintDec2d>
	PrintDec2d(min);
 1ca:	8a e3       	ldi	r24, 0x3A	; 58
 1cc:	63 d0       	rcall	.+198    	; 0x294 <UART0_putchar>
 1ce:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <min>
	UART0_putchar(':');
 1d2:	90 e0       	ldi	r25, 0x00	; 0
	PrintDec2d(seg);
 1d4:	d9 df       	rcall	.-78     	; 0x188 <PrintDec2d>
 1d6:	8a e3       	ldi	r24, 0x3A	; 58
 1d8:	5d d0       	rcall	.+186    	; 0x294 <UART0_putchar>
 1da:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <seg>
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	d3 cf       	rjmp	.-90     	; 0x188 <PrintDec2d>
 1e2:	08 95       	ret

000001e4 <main>:
#include "Clock.h"


int main(void)
{
	UART0_Init(0);
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	3c d0       	rcall	.+120    	; 0x262 <UART0_Init>
 1ea:	ff cf       	rjmp	.-2      	; 0x1ea <main+0x6>

000001ec <Timer2_SecFlag>:
	sei();						//habilita interrupciones (global) */
}

uint8_t Timer2_SecFlag ( void )
{
	if( SecFlag ){
 1ec:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 1f0:	88 23       	and	r24, r24
 1f2:	19 f0       	breq	.+6      	; 0x1fa <Timer2_SecFlag+0xe>
		SecFlag = 0;
 1f4:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <__data_end>
		return 1;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
	}
	else{
		return 0;
	}
}
 1fa:	08 95       	ret

000001fc <__vector_15>:

ISR (TIMER2_OVF_vect)
{ 
 1fc:	1f 92       	push	r1
 1fe:	0f 92       	push	r0
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	0f 92       	push	r0
 204:	11 24       	eor	r1, r1
 206:	0b b6       	in	r0, 0x3b	; 59
 208:	0f 92       	push	r0
 20a:	2f 93       	push	r18
 20c:	3f 93       	push	r19
 20e:	4f 93       	push	r20
 210:	5f 93       	push	r21
 212:	6f 93       	push	r22
 214:	7f 93       	push	r23
 216:	8f 93       	push	r24
 218:	9f 93       	push	r25
 21a:	af 93       	push	r26
 21c:	bf 93       	push	r27
 21e:	ef 93       	push	r30
 220:	ff 93       	push	r31
	TCNT2 += 2;
 222:	e2 eb       	ldi	r30, 0xB2	; 178
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	8e 5f       	subi	r24, 0xFE	; 254
	if( Timer2_SecFlag() ){
 22a:	80 83       	st	Z, r24
 22c:	df df       	rcall	.-66     	; 0x1ec <Timer2_SecFlag>
		Clock_Update();		//actualizando reloj
 22e:	88 23       	and	r24, r24
		UART0_puts("\n\r");
 230:	29 f0       	breq	.+10     	; 0x23c <__vector_15+0x40>
 232:	76 df       	rcall	.-276    	; 0x120 <Clock_Update>
		Clock_Display();	//desplegando reloj	
 234:	83 e0       	ldi	r24, 0x03	; 3
 236:	92 e0       	ldi	r25, 0x02	; 2
	}
 238:	35 d0       	rcall	.+106    	; 0x2a4 <UART0_puts>
 23a:	bf df       	rcall	.-130    	; 0x1ba <Clock_Display>
 23c:	ff 91       	pop	r31
 23e:	ef 91       	pop	r30
 240:	bf 91       	pop	r27
 242:	af 91       	pop	r26
 244:	9f 91       	pop	r25
 246:	8f 91       	pop	r24
 248:	7f 91       	pop	r23
 24a:	6f 91       	pop	r22
 24c:	5f 91       	pop	r21
 24e:	4f 91       	pop	r20
 250:	3f 91       	pop	r19
 252:	2f 91       	pop	r18
 254:	0f 90       	pop	r0
 256:	0b be       	out	0x3b, r0	; 59
 258:	0f 90       	pop	r0
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	0f 90       	pop	r0
 25e:	1f 90       	pop	r1
 260:	18 95       	reti

00000262 <UART0_Init>:
			*str--='\0';
			i--;
		}
	}while(c != 13);
	*str = '\0';
}
 262:	22 e0       	ldi	r18, 0x02	; 2
 264:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 268:	28 e1       	ldi	r18, 0x18	; 24
 26a:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 26e:	26 e0       	ldi	r18, 0x06	; 6
 270:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 274:	89 2b       	or	r24, r25
 276:	39 f4       	brne	.+14     	; 0x286 <UART0_Init+0x24>
 278:	8f ec       	ldi	r24, 0xCF	; 207
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 280:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 284:	08 95       	ret
 286:	87 e6       	ldi	r24, 0x67	; 103
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 28e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 292:	08 95       	ret

00000294 <UART0_putchar>:
 294:	e0 ec       	ldi	r30, 0xC0	; 192
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	90 81       	ld	r25, Z
 29a:	95 ff       	sbrs	r25, 5
 29c:	fd cf       	rjmp	.-6      	; 0x298 <UART0_putchar+0x4>
 29e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2a2:	08 95       	ret

000002a4 <UART0_puts>:
void UART0_puts(char *str)
{
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	ec 01       	movw	r28, r24
	while(*str)
 2aa:	88 81       	ld	r24, Y
 2ac:	88 23       	and	r24, r24
 2ae:	29 f0       	breq	.+10     	; 0x2ba <UART0_puts+0x16>
	{
		UART0_putchar(*str++);
 2b0:	21 96       	adiw	r28, 0x01	; 1
	}while(c != 13);
	*str = '\0';
}
void UART0_puts(char *str)
{
	while(*str)
 2b2:	f0 df       	rcall	.-32     	; 0x294 <UART0_putchar>
 2b4:	89 91       	ld	r24, Y+
 2b6:	81 11       	cpse	r24, r1
	{
		UART0_putchar(*str++);
	}
}
 2b8:	fc cf       	rjmp	.-8      	; 0x2b2 <UART0_puts+0xe>
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <_exit>:
 2c0:	f8 94       	cli

000002c2 <__stop_program>:
 2c2:	ff cf       	rjmp	.-2      	; 0x2c2 <__stop_program>
