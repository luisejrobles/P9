
P9tjuino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800200  00000484  00000518  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000484  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800250  00800250  00000568  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000598  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014ca  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fd2  00000000  00000000  00001bba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000973  00000000  00000000  00002b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000028c  00000000  00000000  00003500  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000688  00000000  00000000  0000378c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007c5  00000000  00000000  00003e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000045d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8c c0       	rjmp	.+280    	; 0x11e <__bad_interrupt>
   6:	00 00       	nop
   8:	8a c0       	rjmp	.+276    	; 0x11e <__bad_interrupt>
   a:	00 00       	nop
   c:	88 c0       	rjmp	.+272    	; 0x11e <__bad_interrupt>
   e:	00 00       	nop
  10:	86 c0       	rjmp	.+268    	; 0x11e <__bad_interrupt>
  12:	00 00       	nop
  14:	84 c0       	rjmp	.+264    	; 0x11e <__bad_interrupt>
  16:	00 00       	nop
  18:	82 c0       	rjmp	.+260    	; 0x11e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	80 c0       	rjmp	.+256    	; 0x11e <__bad_interrupt>
  1e:	00 00       	nop
  20:	7e c0       	rjmp	.+252    	; 0x11e <__bad_interrupt>
  22:	00 00       	nop
  24:	7c c0       	rjmp	.+248    	; 0x11e <__bad_interrupt>
  26:	00 00       	nop
  28:	7a c0       	rjmp	.+244    	; 0x11e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	78 c0       	rjmp	.+240    	; 0x11e <__bad_interrupt>
  2e:	00 00       	nop
  30:	76 c0       	rjmp	.+236    	; 0x11e <__bad_interrupt>
  32:	00 00       	nop
  34:	73 c1       	rjmp	.+742    	; 0x31c <__vector_13>
  36:	00 00       	nop
  38:	72 c0       	rjmp	.+228    	; 0x11e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	70 c0       	rjmp	.+224    	; 0x11e <__bad_interrupt>
  3e:	00 00       	nop
  40:	6e c0       	rjmp	.+220    	; 0x11e <__bad_interrupt>
  42:	00 00       	nop
  44:	6c c0       	rjmp	.+216    	; 0x11e <__bad_interrupt>
  46:	00 00       	nop
  48:	6a c0       	rjmp	.+212    	; 0x11e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	68 c0       	rjmp	.+208    	; 0x11e <__bad_interrupt>
  4e:	00 00       	nop
  50:	66 c0       	rjmp	.+204    	; 0x11e <__bad_interrupt>
  52:	00 00       	nop
  54:	f1 c0       	rjmp	.+482    	; 0x238 <__vector_21>
  56:	00 00       	nop
  58:	62 c0       	rjmp	.+196    	; 0x11e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	60 c0       	rjmp	.+192    	; 0x11e <__bad_interrupt>
  5e:	00 00       	nop
  60:	5e c0       	rjmp	.+188    	; 0x11e <__bad_interrupt>
  62:	00 00       	nop
  64:	5c c0       	rjmp	.+184    	; 0x11e <__bad_interrupt>
  66:	00 00       	nop
  68:	5a c0       	rjmp	.+180    	; 0x11e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	58 c0       	rjmp	.+176    	; 0x11e <__bad_interrupt>
  6e:	00 00       	nop
  70:	56 c0       	rjmp	.+172    	; 0x11e <__bad_interrupt>
  72:	00 00       	nop
  74:	54 c0       	rjmp	.+168    	; 0x11e <__bad_interrupt>
  76:	00 00       	nop
  78:	52 c0       	rjmp	.+164    	; 0x11e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	50 c0       	rjmp	.+160    	; 0x11e <__bad_interrupt>
  7e:	00 00       	nop
  80:	4e c0       	rjmp	.+156    	; 0x11e <__bad_interrupt>
  82:	00 00       	nop
  84:	4c c0       	rjmp	.+152    	; 0x11e <__bad_interrupt>
  86:	00 00       	nop
  88:	4a c0       	rjmp	.+148    	; 0x11e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	48 c0       	rjmp	.+144    	; 0x11e <__bad_interrupt>
  8e:	00 00       	nop
  90:	46 c0       	rjmp	.+140    	; 0x11e <__bad_interrupt>
  92:	00 00       	nop
  94:	44 c0       	rjmp	.+136    	; 0x11e <__bad_interrupt>
  96:	00 00       	nop
  98:	42 c0       	rjmp	.+132    	; 0x11e <__bad_interrupt>
  9a:	00 00       	nop
  9c:	40 c0       	rjmp	.+128    	; 0x11e <__bad_interrupt>
  9e:	00 00       	nop
  a0:	3e c0       	rjmp	.+124    	; 0x11e <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3c c0       	rjmp	.+120    	; 0x11e <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3a c0       	rjmp	.+116    	; 0x11e <__bad_interrupt>
  aa:	00 00       	nop
  ac:	38 c0       	rjmp	.+112    	; 0x11e <__bad_interrupt>
  ae:	00 00       	nop
  b0:	36 c0       	rjmp	.+108    	; 0x11e <__bad_interrupt>
  b2:	00 00       	nop
  b4:	34 c0       	rjmp	.+104    	; 0x11e <__bad_interrupt>
  b6:	00 00       	nop
  b8:	32 c0       	rjmp	.+100    	; 0x11e <__bad_interrupt>
  ba:	00 00       	nop
  bc:	30 c0       	rjmp	.+96     	; 0x11e <__bad_interrupt>
  be:	00 00       	nop
  c0:	2e c0       	rjmp	.+92     	; 0x11e <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2c c0       	rjmp	.+88     	; 0x11e <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2a c0       	rjmp	.+84     	; 0x11e <__bad_interrupt>
  ca:	00 00       	nop
  cc:	28 c0       	rjmp	.+80     	; 0x11e <__bad_interrupt>
  ce:	00 00       	nop
  d0:	26 c0       	rjmp	.+76     	; 0x11e <__bad_interrupt>
  d2:	00 00       	nop
  d4:	24 c0       	rjmp	.+72     	; 0x11e <__bad_interrupt>
  d6:	00 00       	nop
  d8:	22 c0       	rjmp	.+68     	; 0x11e <__bad_interrupt>
  da:	00 00       	nop
  dc:	20 c0       	rjmp	.+64     	; 0x11e <__bad_interrupt>
  de:	00 00       	nop
  e0:	1e c0       	rjmp	.+60     	; 0x11e <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	e4 e8       	ldi	r30, 0x84	; 132
  f8:	f4 e0       	ldi	r31, 0x04	; 4
  fa:	00 e0       	ldi	r16, 0x00	; 0
  fc:	0b bf       	out	0x3b, r16	; 59
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
 100:	07 90       	elpm	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	a0 35       	cpi	r26, 0x50	; 80
 106:	b1 07       	cpc	r27, r17
 108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
 10a:	22 e0       	ldi	r18, 0x02	; 2
 10c:	a0 e5       	ldi	r26, 0x50	; 80
 10e:	b2 e0       	ldi	r27, 0x02	; 2
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	a4 35       	cpi	r26, 0x54	; 84
 116:	b2 07       	cpc	r27, r18
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	6b d0       	rcall	.+214    	; 0x1f2 <main>
 11c:	b1 c1       	rjmp	.+866    	; 0x480 <_exit>

0000011e <__bad_interrupt>:
 11e:	70 cf       	rjmp	.-288    	; 0x0 <__vectors>

00000120 <Clock_Ini>:
BYTE min=59; /*minutos*/
BYTE horas=23; /*horas*/

void Clock_Ini(BYTE hora, BYTE minutos, BYTE segundos)
{
	seg=segundos;
 120:	40 93 02 02 	sts	0x0202, r20	; 0x800202 <seg>
	min=minutos;
 124:	60 93 01 02 	sts	0x0201, r22	; 0x800201 <min>
	horas=hora;
 128:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
 12c:	08 95       	ret

0000012e <Clock_Update>:
}
void Clock_Update( void ){
	seg=(++seg%60);
 12e:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <seg>
 132:	9f 5f       	subi	r25, 0xFF	; 255
 134:	89 e8       	ldi	r24, 0x89	; 137
 136:	98 9f       	mul	r25, r24
 138:	81 2d       	mov	r24, r1
 13a:	11 24       	eor	r1, r1
 13c:	82 95       	swap	r24
 13e:	86 95       	lsr	r24
 140:	87 70       	andi	r24, 0x07	; 7
 142:	2c e3       	ldi	r18, 0x3C	; 60
 144:	82 9f       	mul	r24, r18
 146:	90 19       	sub	r25, r0
 148:	11 24       	eor	r1, r1
 14a:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <seg>
	if(seg == 0)
 14e:	91 11       	cpse	r25, r1
 150:	21 c0       	rjmp	.+66     	; 0x194 <Clock_Update+0x66>
	{
		min=(++min%60);
 152:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <min>
 156:	9f 5f       	subi	r25, 0xFF	; 255
 158:	89 e8       	ldi	r24, 0x89	; 137
 15a:	98 9f       	mul	r25, r24
 15c:	81 2d       	mov	r24, r1
 15e:	11 24       	eor	r1, r1
 160:	82 95       	swap	r24
 162:	86 95       	lsr	r24
 164:	87 70       	andi	r24, 0x07	; 7
 166:	2c e3       	ldi	r18, 0x3C	; 60
 168:	82 9f       	mul	r24, r18
 16a:	90 19       	sub	r25, r0
 16c:	11 24       	eor	r1, r1
 16e:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <min>
		if(min == 0)
 172:	91 11       	cpse	r25, r1
 174:	0f c0       	rjmp	.+30     	; 0x194 <Clock_Update+0x66>
		{
			horas=(++horas%24);
 176:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	9b ea       	ldi	r25, 0xAB	; 171
 17e:	89 9f       	mul	r24, r25
 180:	91 2d       	mov	r25, r1
 182:	11 24       	eor	r1, r1
 184:	92 95       	swap	r25
 186:	9f 70       	andi	r25, 0x0F	; 15
 188:	28 e1       	ldi	r18, 0x18	; 24
 18a:	92 9f       	mul	r25, r18
 18c:	80 19       	sub	r24, r0
 18e:	11 24       	eor	r1, r1
 190:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
 194:	08 95       	ret

00000196 <PrintDec2d>:
	UART0_putchar(':');
	PrintDec2d(min);
	UART0_putchar(':');
	PrintDec2d(seg);
}
void PrintDec2d( BYTE dato){
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	d8 2f       	mov	r29, r24
	UART0_putchar( dato/10 +'0'); /* Imprime decenas */
 19c:	cd ec       	ldi	r28, 0xCD	; 205
 19e:	8c 9f       	mul	r24, r28
 1a0:	c1 2d       	mov	r28, r1
 1a2:	11 24       	eor	r1, r1
 1a4:	c6 95       	lsr	r28
 1a6:	c6 95       	lsr	r28
 1a8:	c6 95       	lsr	r28
 1aa:	80 e3       	ldi	r24, 0x30	; 48
 1ac:	8c 0f       	add	r24, r28
 1ae:	01 d1       	rcall	.+514    	; 0x3b2 <UART0_putchar>
	UART0_putchar( dato%10 +'0'); /* Imprime unidades */
 1b0:	cc 0f       	add	r28, r28
 1b2:	8c 2f       	mov	r24, r28
 1b4:	88 0f       	add	r24, r24
 1b6:	88 0f       	add	r24, r24
 1b8:	c8 0f       	add	r28, r24
 1ba:	8d 2f       	mov	r24, r29
 1bc:	8c 1b       	sub	r24, r28
 1be:	80 5d       	subi	r24, 0xD0	; 208
 1c0:	f8 d0       	rcall	.+496    	; 0x3b2 <UART0_putchar>
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <Clock_Display>:
		}
	}
}
void Clock_Display( void ){
	/* imprimir reloj en formato "hh:mm:ss" */;
	UART0_putchar(10);
 1c8:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putchar(13);
 1ca:	f3 d0       	rcall	.+486    	; 0x3b2 <UART0_putchar>
 1cc:	8d e0       	ldi	r24, 0x0D	; 13
	PrintDec2d(horas);
 1ce:	f1 d0       	rcall	.+482    	; 0x3b2 <UART0_putchar>
 1d0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
	UART0_putchar(':');
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	df df       	rcall	.-66     	; 0x196 <PrintDec2d>
	PrintDec2d(min);
 1d8:	8a e3       	ldi	r24, 0x3A	; 58
 1da:	eb d0       	rcall	.+470    	; 0x3b2 <UART0_putchar>
 1dc:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <min>
	UART0_putchar(':');
 1e0:	90 e0       	ldi	r25, 0x00	; 0
	PrintDec2d(seg);
 1e2:	d9 df       	rcall	.-78     	; 0x196 <PrintDec2d>
 1e4:	8a e3       	ldi	r24, 0x3A	; 58
 1e6:	e5 d0       	rcall	.+458    	; 0x3b2 <UART0_putchar>
 1e8:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <seg>
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	d3 cf       	rjmp	.-90     	; 0x196 <PrintDec2d>
 1f0:	08 95       	ret

000001f2 <main>:
#include "UART.h"
#include "Clock.h"


int main(void)
{
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	cd b7       	in	r28, 0x3d	; 61
 1f8:	de b7       	in	r29, 0x3e	; 62
 1fa:	64 97       	sbiw	r28, 0x14	; 20
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	f8 94       	cli
 200:	de bf       	out	0x3e, r29	; 62
 202:	0f be       	out	0x3f, r0	; 63
	char str[20];
	
	//DDRB = (1<<PB7);			//Puerto b salida
	//UART0_Init(0);			//Inicializando UART0
	
	UART0_AutoBaudRate();
 204:	cd bf       	out	0x3d, r28	; 61
	UART0_puts("\n\rAutobauding done. UBRR0=");
 206:	ba d0       	rcall	.+372    	; 0x37c <UART0_AutoBaudRate>
 208:	83 e0       	ldi	r24, 0x03	; 3
 20a:	92 e0       	ldi	r25, 0x02	; 2
	itoa(str,UBRR0,10);
 20c:	da d0       	rcall	.+436    	; 0x3c2 <UART0_puts>
 20e:	60 91 c4 00 	lds	r22, 0x00C4	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 212:	70 91 c5 00 	lds	r23, 0x00C5	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 216:	4a e0       	ldi	r20, 0x0A	; 10
 218:	ce 01       	movw	r24, r28
	UART0_puts(str);
 21a:	01 96       	adiw	r24, 0x01	; 1
 21c:	e0 d0       	rcall	.+448    	; 0x3de <itoa>
	UART0_puts("\n\r");
 21e:	ce 01       	movw	r24, r28
 220:	01 96       	adiw	r24, 0x01	; 1
	
	Timer2_Init(2);
 222:	cf d0       	rcall	.+414    	; 0x3c2 <UART0_puts>
 224:	8c e4       	ldi	r24, 0x4C	; 76
	Clock_Ini(23,59,55);
 226:	92 e0       	ldi	r25, 0x02	; 2
 228:	cc d0       	rcall	.+408    	; 0x3c2 <UART0_puts>
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	40 d0       	rcall	.+128    	; 0x2ae <Timer2_Init>
 22e:	47 e3       	ldi	r20, 0x37	; 55
 230:	6b e3       	ldi	r22, 0x3B	; 59
 232:	87 e1       	ldi	r24, 0x17	; 23
 234:	75 df       	rcall	.-278    	; 0x120 <Clock_Ini>
 236:	ff cf       	rjmp	.-2      	; 0x236 <main+0x44>

00000238 <__vector_21>:
		sei();	//interrupciones globales

}

ISR (TIMER0_COMPA_vect)
{ 
 238:	1f 92       	push	r1
 23a:	0f 92       	push	r0
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	0f 92       	push	r0
 240:	11 24       	eor	r1, r1
 242:	0b b6       	in	r0, 0x3b	; 59
 244:	0f 92       	push	r0
 246:	2f 93       	push	r18
 248:	3f 93       	push	r19
 24a:	4f 93       	push	r20
 24c:	5f 93       	push	r21
 24e:	6f 93       	push	r22
 250:	7f 93       	push	r23
 252:	8f 93       	push	r24
 254:	9f 93       	push	r25
 256:	af 93       	push	r26
 258:	bf 93       	push	r27
 25a:	ef 93       	push	r30
 25c:	ff 93       	push	r31
	static uint16_t mSecCnt;
	mSecCnt++; /* Incrementa contador de milisegundos */
 25e:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <__data_end>
 262:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <__data_end+0x1>
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <__data_end+0x1>
 26c:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <__data_end>
	if( mSecCnt == 1000 ){
 270:	88 3e       	cpi	r24, 0xE8	; 232
 272:	93 40       	sbci	r25, 0x03	; 3
		Clock_Update();		//actualizando reloj
 274:	49 f4       	brne	.+18     	; 0x288 <__vector_21+0x50>
		UART0_puts("\n\r");
 276:	5b df       	rcall	.-330    	; 0x12e <Clock_Update>
 278:	8c e4       	ldi	r24, 0x4C	; 76
		Clock_Display();	//desplegando reloj	
 27a:	92 e0       	ldi	r25, 0x02	; 2
 27c:	a2 d0       	rcall	.+324    	; 0x3c2 <UART0_puts>
		mSecCnt = 0;		//reiniciando cuenta de ms
 27e:	a4 df       	rcall	.-184    	; 0x1c8 <Clock_Display>
 280:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <__data_end+0x1>
 284:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <__data_end>
	}
 288:	ff 91       	pop	r31
 28a:	ef 91       	pop	r30
 28c:	bf 91       	pop	r27
 28e:	af 91       	pop	r26
 290:	9f 91       	pop	r25
 292:	8f 91       	pop	r24
 294:	7f 91       	pop	r23
 296:	6f 91       	pop	r22
 298:	5f 91       	pop	r21
 29a:	4f 91       	pop	r20
 29c:	3f 91       	pop	r19
 29e:	2f 91       	pop	r18
 2a0:	0f 90       	pop	r0
 2a2:	0b be       	out	0x3b, r0	; 59
 2a4:	0f 90       	pop	r0
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	0f 90       	pop	r0
 2aa:	1f 90       	pop	r1
 2ac:	18 95       	reti

000002ae <Timer2_Init>:
	4. To switch to asynchronous operation: Wait for TCN2UB, OCR2xUB, and TCR2xUB.
	5. Clear the Timer/Counter2 Interrupt Flags.
	6. Enable interrupts, if needed.
	*/
	
	TIMSK2 = 0;							//Clear a interrupciones timer2
 2ae:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	ASSR = (1<<AS2);					//Clock externo seleccionado
 2b2:	90 e2       	ldi	r25, 0x20	; 32
 2b4:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	OCR2A = 256-1;						//TOP
 2b8:	9f ef       	ldi	r25, 0xFF	; 255
 2ba:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	TCNT2 = 0;							//Contador inicializado en 0
 2be:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	TCCR2A = (1<<WGM21);					//CTC mode				
 2c2:	92 e0       	ldi	r25, 0x02	; 2
 2c4:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	TCCR2B = (5<<CS20);					// PS 128
 2c8:	95 e0       	ldi	r25, 0x05	; 5
 2ca:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	while( (ASSR&((1<<TCN2UB)|(1<<OCR2AUB)|(1<<OCR2BUB)|(1<<TCR2AUB)|(1<<TCR2BUB))) );
 2ce:	e6 eb       	ldi	r30, 0xB6	; 182
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	90 81       	ld	r25, Z
 2d4:	9f 71       	andi	r25, 0x1F	; 31
 2d6:	e9 f7       	brne	.-6      	; 0x2d2 <Timer2_Init+0x24>
	TIFR2 = (7<<TOV2);					//Se borran en alto las banderas de interrupcion
 2d8:	97 e0       	ldi	r25, 0x07	; 7
 2da:	97 bb       	out	0x17, r25	; 23
	TIMSK2 = (1<<OCIE2A);				//Interrupt compare A enable
 2dc:	92 e0       	ldi	r25, 0x02	; 2
 2de:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	sei();								//habilita interrupciones (global) */
 2e2:	78 94       	sei
	if((baseT>=1) && (baseT<=8))
 2e4:	9f ef       	ldi	r25, 0xFF	; 255
 2e6:	98 0f       	add	r25, r24
 2e8:	98 30       	cpi	r25, 0x08	; 8
 2ea:	18 f4       	brcc	.+6      	; 0x2f2 <Timer2_Init+0x44>
	{
		Flag = baseT;						//segundos a los cuales llegar	
 2ec:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <Flag>
 2f0:	06 c0       	rjmp	.+12     	; 0x2fe <Timer2_Init+0x50>
	}else
	{
		UART0_puts("\n\rSeg no permitidos, 1seg seleccionado default\n\r");
 2f2:	8e e1       	ldi	r24, 0x1E	; 30
 2f4:	92 e0       	ldi	r25, 0x02	; 2
 2f6:	65 d0       	rcall	.+202    	; 0x3c2 <UART0_puts>
		Flag = 1;
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <Flag>
	}
	base = 0;
 2fe:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <base>
 302:	08 95       	ret

00000304 <Timer2_Flag>:
}
uint8_t Timer2_Flag ( void )
{
	if( Flag == base ){
 304:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <Flag>
 308:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <base>
 30c:	98 13       	cpse	r25, r24
 30e:	04 c0       	rjmp	.+8      	; 0x318 <Timer2_Flag+0x14>
		base = 0;
 310:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <base>
		return 1;
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	08 95       	ret
	}
	else{
	
		return 0;
 318:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 31a:	08 95       	ret

0000031c <__vector_13>:
ISR (TIMER2_COMPA_vect)
{ 
 31c:	1f 92       	push	r1
 31e:	0f 92       	push	r0
 320:	0f b6       	in	r0, 0x3f	; 63
 322:	0f 92       	push	r0
 324:	11 24       	eor	r1, r1
 326:	0b b6       	in	r0, 0x3b	; 59
 328:	0f 92       	push	r0
 32a:	2f 93       	push	r18
 32c:	3f 93       	push	r19
 32e:	4f 93       	push	r20
 330:	5f 93       	push	r21
 332:	6f 93       	push	r22
 334:	7f 93       	push	r23
 336:	8f 93       	push	r24
 338:	9f 93       	push	r25
 33a:	af 93       	push	r26
 33c:	bf 93       	push	r27
 33e:	ef 93       	push	r30
 340:	ff 93       	push	r31
	base++;
 342:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <base>
 346:	8f 5f       	subi	r24, 0xFF	; 255
 348:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <base>
	if(Timer2_Flag())
	{
		Clock_Update();
 34c:	db df       	rcall	.-74     	; 0x304 <Timer2_Flag>
		Clock_Display();
 34e:	88 23       	and	r24, r24
 350:	11 f0       	breq	.+4      	; 0x356 <__vector_13+0x3a>
	}
 352:	ed de       	rcall	.-550    	; 0x12e <Clock_Update>
 354:	39 df       	rcall	.-398    	; 0x1c8 <Clock_Display>
 356:	ff 91       	pop	r31
 358:	ef 91       	pop	r30
 35a:	bf 91       	pop	r27
 35c:	af 91       	pop	r26
 35e:	9f 91       	pop	r25
 360:	8f 91       	pop	r24
 362:	7f 91       	pop	r23
 364:	6f 91       	pop	r22
 366:	5f 91       	pop	r21
 368:	4f 91       	pop	r20
 36a:	3f 91       	pop	r19
 36c:	2f 91       	pop	r18
 36e:	0f 90       	pop	r0
 370:	0b be       	out	0x3b, r0	; 59
 372:	0f 90       	pop	r0
 374:	0f be       	out	0x3f, r0	; 63
 376:	0f 90       	pop	r0
 378:	1f 90       	pop	r1
 37a:	18 95       	reti

0000037c <UART0_AutoBaudRate>:
			*str--='\0';
			i--;
		}
	}while(c != 13);
	*str = '\0';
}
 37c:	8e ef       	ldi	r24, 0xFE	; 254
 37e:	8d b9       	out	0x0d, r24	; 13
 380:	82 e0       	ldi	r24, 0x02	; 2
 382:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 386:	98 e1       	ldi	r25, 0x18	; 24
 388:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 38c:	96 e0       	ldi	r25, 0x06	; 6
 38e:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 392:	14 bc       	out	0x24, r1	; 36
 394:	85 bd       	out	0x25, r24	; 37
 396:	60 99       	sbic	0x0c, 0	; 12
 398:	fe cf       	rjmp	.-4      	; 0x396 <UART0_AutoBaudRate+0x1a>
 39a:	16 bc       	out	0x26, r1	; 38
 39c:	60 9b       	sbis	0x0c, 0	; 12
 39e:	fe cf       	rjmp	.-4      	; 0x39c <UART0_AutoBaudRate+0x20>
 3a0:	15 bc       	out	0x25, r1	; 37
 3a2:	86 b5       	in	r24, 0x26	; 38
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	01 97       	sbiw	r24, 0x01	; 1
 3a8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 3ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 3b0:	08 95       	ret

000003b2 <UART0_putchar>:
 3b2:	e0 ec       	ldi	r30, 0xC0	; 192
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	90 81       	ld	r25, Z
 3b8:	95 ff       	sbrs	r25, 5
 3ba:	fd cf       	rjmp	.-6      	; 0x3b6 <UART0_putchar+0x4>
 3bc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 3c0:	08 95       	ret

000003c2 <UART0_puts>:
void UART0_puts(char *str)
{
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	ec 01       	movw	r28, r24
	while(*str)
 3c8:	88 81       	ld	r24, Y
 3ca:	88 23       	and	r24, r24
 3cc:	29 f0       	breq	.+10     	; 0x3d8 <UART0_puts+0x16>
	{
		UART0_putchar(*str++);
 3ce:	21 96       	adiw	r28, 0x01	; 1
	}while(c != 13);
	*str = '\0';
}
void UART0_puts(char *str)
{
	while(*str)
 3d0:	f0 df       	rcall	.-32     	; 0x3b2 <UART0_putchar>
 3d2:	89 91       	ld	r24, Y+
 3d4:	81 11       	cpse	r24, r1
	{
		UART0_putchar(*str++);
	}
}
 3d6:	fc cf       	rjmp	.-8      	; 0x3d0 <UART0_puts+0xe>
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	08 95       	ret

000003de <itoa>:
void itoa(char *str, uint16_t number, uint8_t base)
{
 3de:	0f 93       	push	r16
 3e0:	1f 93       	push	r17
 3e2:	cf 93       	push	r28
 3e4:	df 93       	push	r29
 3e6:	fc 01       	movw	r30, r24
 3e8:	9b 01       	movw	r18, r22
	unsigned int cociente, residuo,count = 0, i=0, j;
 3ea:	c0 e0       	ldi	r28, 0x00	; 0
 3ec:	d0 e0       	ldi	r29, 0x00	; 0
	char c;
	cociente = number;
	do{
		residuo = cociente%base;
 3ee:	04 2f       	mov	r16, r20
 3f0:	10 e0       	ldi	r17, 0x00	; 0
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <itoa+0x1a>
		}else{
			c = residuo + '0'; //agregar el respectivo para crear el caracter de numero
		}

		*str++ = c;
		count++;
 3f4:	ec 01       	movw	r28, r24
			c = residuo + 55;
		}else{
			c = residuo + '0'; //agregar el respectivo para crear el caracter de numero
		}

		*str++ = c;
 3f6:	fd 01       	movw	r30, r26
{
	unsigned int cociente, residuo,count = 0, i=0, j;
	char c;
	cociente = number;
	do{
		residuo = cociente%base;
 3f8:	c9 01       	movw	r24, r18
 3fa:	b8 01       	movw	r22, r16
 3fc:	2d d0       	rcall	.+90     	; 0x458 <__udivmodhi4>
		cociente = cociente/base;
 3fe:	26 2f       	mov	r18, r22
 400:	37 2f       	mov	r19, r23
		if(residuo > 9)	//si es mayor a 9, agregar el respectivo para imprimir letra.
 402:	8a 30       	cpi	r24, 0x0A	; 10
 404:	91 05       	cpc	r25, r1
 406:	10 f0       	brcs	.+4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		{
			c = residuo + 55;
 408:	89 5c       	subi	r24, 0xC9	; 201
 40a:	01 c0       	rjmp	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		}else{
			c = residuo + '0'; //agregar el respectivo para crear el caracter de numero
 40c:	80 5d       	subi	r24, 0xD0	; 208
		}

		*str++ = c;
 40e:	df 01       	movw	r26, r30
 410:	11 96       	adiw	r26, 0x01	; 1
 412:	80 83       	st	Z, r24
		count++;
 414:	ce 01       	movw	r24, r28
 416:	01 96       	adiw	r24, 0x01	; 1
	}while( cociente != 0 );	
 418:	21 15       	cp	r18, r1
 41a:	31 05       	cpc	r19, r1
 41c:	59 f7       	brne	.-42     	; 0x3f4 <itoa+0x16>
	*str= '\0';
 41e:	11 82       	std	Z+1, r1	; 0x01
	str -=count;
 420:	a8 1b       	sub	r26, r24
 422:	b9 0b       	sbc	r27, r25
	j = count -1;
	//==============invertir cadena==================
	while(i < j)
 424:	20 97       	sbiw	r28, 0x00	; 0
 426:	99 f0       	breq	.+38     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 428:	fd 01       	movw	r30, r26
 42a:	a8 0f       	add	r26, r24
 42c:	b9 1f       	adc	r27, r25
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	90 e0       	ldi	r25, 0x00	; 0
	{
		if( *(str+i) != *(str+j))
 432:	20 81       	ld	r18, Z
 434:	3e 91       	ld	r19, -X
 436:	23 17       	cp	r18, r19
 438:	11 f0       	breq	.+4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		{
			c = *(str+i);
			*(str+i) = *(str+j);
 43a:	30 83       	st	Z, r19
			*(str+j) = c;	
 43c:	2c 93       	st	X, r18
		}
		i++;
 43e:	01 96       	adiw	r24, 0x01	; 1
 440:	31 96       	adiw	r30, 0x01	; 1
	}while( cociente != 0 );	
	*str= '\0';
	str -=count;
	j = count -1;
	//==============invertir cadena==================
	while(i < j)
 442:	9e 01       	movw	r18, r28
 444:	28 1b       	sub	r18, r24
 446:	39 0b       	sbc	r19, r25
 448:	82 17       	cp	r24, r18
 44a:	93 07       	cpc	r25, r19
 44c:	90 f3       	brcs	.-28     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
			*(str+j) = c;	
		}
		i++;
		j--;
	}
}	
 44e:	df 91       	pop	r29
 450:	cf 91       	pop	r28
 452:	1f 91       	pop	r17
 454:	0f 91       	pop	r16
 456:	08 95       	ret

00000458 <__udivmodhi4>:
 458:	aa 1b       	sub	r26, r26
 45a:	bb 1b       	sub	r27, r27
 45c:	51 e1       	ldi	r21, 0x11	; 17
 45e:	07 c0       	rjmp	.+14     	; 0x46e <__udivmodhi4_ep>

00000460 <__udivmodhi4_loop>:
 460:	aa 1f       	adc	r26, r26
 462:	bb 1f       	adc	r27, r27
 464:	a6 17       	cp	r26, r22
 466:	b7 07       	cpc	r27, r23
 468:	10 f0       	brcs	.+4      	; 0x46e <__udivmodhi4_ep>
 46a:	a6 1b       	sub	r26, r22
 46c:	b7 0b       	sbc	r27, r23

0000046e <__udivmodhi4_ep>:
 46e:	88 1f       	adc	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	5a 95       	dec	r21
 474:	a9 f7       	brne	.-22     	; 0x460 <__udivmodhi4_loop>
 476:	80 95       	com	r24
 478:	90 95       	com	r25
 47a:	bc 01       	movw	r22, r24
 47c:	cd 01       	movw	r24, r26
 47e:	08 95       	ret

00000480 <_exit>:
 480:	f8 94       	cli

00000482 <__stop_program>:
 482:	ff cf       	rjmp	.-2      	; 0x482 <__stop_program>
