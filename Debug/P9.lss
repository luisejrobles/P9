
P9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  000002e0  00000374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800206  00800206  0000037a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000037a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001285  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ea6  00000000  00000000  00001749  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000706  00000000  00000000  000025ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  00002cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061d  00000000  00000000  00002ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000692  00000000  00000000  000034e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003b77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	d9 c0       	rjmp	.+434    	; 0x208 <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 ee       	ldi	r30, 0xE0	; 224
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 30       	cpi	r26, 0x06	; 6
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e0       	ldi	r26, 0x06	; 6
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a8 30       	cpi	r26, 0x08	; 8
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	64 d0       	rcall	.+200    	; 0x1e8 <main>
 120:	dd c0       	rjmp	.+442    	; 0x2dc <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <Clock_Update>:
	seg=segundos;
	min=minutos;
	horas=hora;
}
void Clock_Update( void ){
	seg=(++seg%60);
 124:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <seg>
 128:	9f 5f       	subi	r25, 0xFF	; 255
 12a:	89 e8       	ldi	r24, 0x89	; 137
 12c:	98 9f       	mul	r25, r24
 12e:	81 2d       	mov	r24, r1
 130:	11 24       	eor	r1, r1
 132:	82 95       	swap	r24
 134:	86 95       	lsr	r24
 136:	87 70       	andi	r24, 0x07	; 7
 138:	2c e3       	ldi	r18, 0x3C	; 60
 13a:	82 9f       	mul	r24, r18
 13c:	90 19       	sub	r25, r0
 13e:	11 24       	eor	r1, r1
 140:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <seg>
	if(seg == 0)
 144:	91 11       	cpse	r25, r1
 146:	21 c0       	rjmp	.+66     	; 0x18a <Clock_Update+0x66>
	{
		min=(++min%60);
 148:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <min>
 14c:	9f 5f       	subi	r25, 0xFF	; 255
 14e:	89 e8       	ldi	r24, 0x89	; 137
 150:	98 9f       	mul	r25, r24
 152:	81 2d       	mov	r24, r1
 154:	11 24       	eor	r1, r1
 156:	82 95       	swap	r24
 158:	86 95       	lsr	r24
 15a:	87 70       	andi	r24, 0x07	; 7
 15c:	2c e3       	ldi	r18, 0x3C	; 60
 15e:	82 9f       	mul	r24, r18
 160:	90 19       	sub	r25, r0
 162:	11 24       	eor	r1, r1
 164:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <min>
		if(min == 0)
 168:	91 11       	cpse	r25, r1
 16a:	0f c0       	rjmp	.+30     	; 0x18a <Clock_Update+0x66>
		{
			horas=(++horas%24);
 16c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 170:	8f 5f       	subi	r24, 0xFF	; 255
 172:	9b ea       	ldi	r25, 0xAB	; 171
 174:	89 9f       	mul	r24, r25
 176:	91 2d       	mov	r25, r1
 178:	11 24       	eor	r1, r1
 17a:	92 95       	swap	r25
 17c:	9f 70       	andi	r25, 0x0F	; 15
 17e:	28 e1       	ldi	r18, 0x18	; 24
 180:	92 9f       	mul	r25, r18
 182:	80 19       	sub	r24, r0
 184:	11 24       	eor	r1, r1
 186:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
 18a:	08 95       	ret

0000018c <PrintDec2d>:
	UART0_putchar(':');
	PrintDec2d(min);
	UART0_putchar(':');
	PrintDec2d(seg);
}
void PrintDec2d( BYTE dato){
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	d8 2f       	mov	r29, r24
	UART0_putchar( dato/10 +'0'); /* Imprime decenas */
 192:	cd ec       	ldi	r28, 0xCD	; 205
 194:	8c 9f       	mul	r24, r28
 196:	c1 2d       	mov	r28, r1
 198:	11 24       	eor	r1, r1
 19a:	c6 95       	lsr	r28
 19c:	c6 95       	lsr	r28
 19e:	c6 95       	lsr	r28
 1a0:	80 e3       	ldi	r24, 0x30	; 48
 1a2:	8c 0f       	add	r24, r28
 1a4:	85 d0       	rcall	.+266    	; 0x2b0 <UART0_putchar>
	UART0_putchar( dato%10 +'0'); /* Imprime unidades */
 1a6:	cc 0f       	add	r28, r28
 1a8:	8c 2f       	mov	r24, r28
 1aa:	88 0f       	add	r24, r24
 1ac:	88 0f       	add	r24, r24
 1ae:	c8 0f       	add	r28, r24
 1b0:	8d 2f       	mov	r24, r29
 1b2:	8c 1b       	sub	r24, r28
 1b4:	80 5d       	subi	r24, 0xD0	; 208
 1b6:	7c d0       	rcall	.+248    	; 0x2b0 <UART0_putchar>
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <Clock_Display>:
		}
	}
}
void Clock_Display( void ){
	/* imprimir reloj en formato "hh:mm:ss" */;
	UART0_putchar(10);
 1be:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putchar(13);
 1c0:	77 d0       	rcall	.+238    	; 0x2b0 <UART0_putchar>
 1c2:	8d e0       	ldi	r24, 0x0D	; 13
	PrintDec2d(horas);
 1c4:	75 d0       	rcall	.+234    	; 0x2b0 <UART0_putchar>
 1c6:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
	UART0_putchar(':');
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	df df       	rcall	.-66     	; 0x18c <PrintDec2d>
	PrintDec2d(min);
 1ce:	8a e3       	ldi	r24, 0x3A	; 58
 1d0:	6f d0       	rcall	.+222    	; 0x2b0 <UART0_putchar>
 1d2:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <min>
	UART0_putchar(':');
 1d6:	90 e0       	ldi	r25, 0x00	; 0
	PrintDec2d(seg);
 1d8:	d9 df       	rcall	.-78     	; 0x18c <PrintDec2d>
 1da:	8a e3       	ldi	r24, 0x3A	; 58
 1dc:	69 d0       	rcall	.+210    	; 0x2b0 <UART0_putchar>
 1de:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <seg>
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	d3 cf       	rjmp	.-90     	; 0x18c <PrintDec2d>
 1e6:	08 95       	ret

000001e8 <main>:


int main()
{

	UART0_Init(0);	//iniciando 2560 9600 BR
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	90 e0       	ldi	r25, 0x00	; 0
	timer0_CTC();	//Iniciando timer0
 1ec:	48 d0       	rcall	.+144    	; 0x27e <UART0_Init>
 1ee:	01 d0       	rcall	.+2      	; 0x1f2 <timer0_CTC>
 1f0:	ff cf       	rjmp	.-2      	; 0x1f0 <main+0x8>

000001f2 <timer0_CTC>:
	sei(); /* habilita interrupciones (global) */
}

void timer0_CTC(void)
{
	TCNT0  = 0;	//incializando timer en 0
 1f2:	16 bc       	out	0x26, r1	; 38
	TCCR0A = (2<<WGM00);	//CTC enable
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (3<<CS00);		//64 PS
 1f8:	93 e0       	ldi	r25, 0x03	; 3
 1fa:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = (1<<OCIE2A);	//Output cmp match A interrupt enable
 1fc:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
	OCR0A  = 250 -1;		//TOP 	
 200:	89 ef       	ldi	r24, 0xF9	; 249
 202:	87 bd       	out	0x27, r24	; 39
	
	sei();	//interrupciones globales
 204:	78 94       	sei
 206:	08 95       	ret

00000208 <__vector_21>:

}

ISR (TIMER0_COMPA_vect)
{ 
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	0b b6       	in	r0, 0x3b	; 59
 214:	0f 92       	push	r0
 216:	2f 93       	push	r18
 218:	3f 93       	push	r19
 21a:	4f 93       	push	r20
 21c:	5f 93       	push	r21
 21e:	6f 93       	push	r22
 220:	7f 93       	push	r23
 222:	8f 93       	push	r24
 224:	9f 93       	push	r25
 226:	af 93       	push	r26
 228:	bf 93       	push	r27
 22a:	ef 93       	push	r30
 22c:	ff 93       	push	r31
	static uint16_t mSecCnt;
	mSecCnt++; /* Incrementa contador de milisegundos */
 22e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 232:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <__data_end+0x1>
 236:	01 96       	adiw	r24, 0x01	; 1
 238:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <__data_end+0x1>
 23c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
	if( mSecCnt == 1000 ){
 240:	88 3e       	cpi	r24, 0xE8	; 232
 242:	93 40       	sbci	r25, 0x03	; 3
		Clock_Update();		//actualizando reloj
 244:	49 f4       	brne	.+18     	; 0x258 <__vector_21+0x50>
		UART0_puts("\n\r");
 246:	6e df       	rcall	.-292    	; 0x124 <Clock_Update>
 248:	83 e0       	ldi	r24, 0x03	; 3
		Clock_Display();	//desplegando reloj	
 24a:	92 e0       	ldi	r25, 0x02	; 2
 24c:	39 d0       	rcall	.+114    	; 0x2c0 <UART0_puts>
		mSecCnt = 0;		//reiniciando cuenta de ms
 24e:	b7 df       	rcall	.-146    	; 0x1be <Clock_Display>
 250:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <__data_end+0x1>
 254:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <__data_end>
	}
 258:	ff 91       	pop	r31
 25a:	ef 91       	pop	r30
 25c:	bf 91       	pop	r27
 25e:	af 91       	pop	r26
 260:	9f 91       	pop	r25
 262:	8f 91       	pop	r24
 264:	7f 91       	pop	r23
 266:	6f 91       	pop	r22
 268:	5f 91       	pop	r21
 26a:	4f 91       	pop	r20
 26c:	3f 91       	pop	r19
 26e:	2f 91       	pop	r18
 270:	0f 90       	pop	r0
 272:	0b be       	out	0x3b, r0	; 59
 274:	0f 90       	pop	r0
 276:	0f be       	out	0x3f, r0	; 63
 278:	0f 90       	pop	r0
 27a:	1f 90       	pop	r1
 27c:	18 95       	reti

0000027e <UART0_Init>:
			*str--='\0';
			i--;
		}
	}while(c != 13);
	*str = '\0';
}
 27e:	22 e0       	ldi	r18, 0x02	; 2
 280:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 284:	28 e1       	ldi	r18, 0x18	; 24
 286:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 28a:	26 e0       	ldi	r18, 0x06	; 6
 28c:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 290:	89 2b       	or	r24, r25
 292:	39 f4       	brne	.+14     	; 0x2a2 <UART0_Init+0x24>
 294:	8f ec       	ldi	r24, 0xCF	; 207
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 29c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 2a0:	08 95       	ret
 2a2:	87 e6       	ldi	r24, 0x67	; 103
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 2aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 2ae:	08 95       	ret

000002b0 <UART0_putchar>:
 2b0:	e0 ec       	ldi	r30, 0xC0	; 192
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	90 81       	ld	r25, Z
 2b6:	95 ff       	sbrs	r25, 5
 2b8:	fd cf       	rjmp	.-6      	; 0x2b4 <UART0_putchar+0x4>
 2ba:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 2be:	08 95       	ret

000002c0 <UART0_puts>:
void UART0_puts(char *str)
{
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	ec 01       	movw	r28, r24
	while(*str)
 2c6:	88 81       	ld	r24, Y
 2c8:	88 23       	and	r24, r24
 2ca:	29 f0       	breq	.+10     	; 0x2d6 <UART0_puts+0x16>
	{
		UART0_putchar(*str++);
 2cc:	21 96       	adiw	r28, 0x01	; 1
	}while(c != 13);
	*str = '\0';
}
void UART0_puts(char *str)
{
	while(*str)
 2ce:	f0 df       	rcall	.-32     	; 0x2b0 <UART0_putchar>
 2d0:	89 91       	ld	r24, Y+
 2d2:	81 11       	cpse	r24, r1
	{
		UART0_putchar(*str++);
	}
}
 2d4:	fc cf       	rjmp	.-8      	; 0x2ce <UART0_puts+0xe>
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	08 95       	ret

000002dc <_exit>:
 2dc:	f8 94       	cli

000002de <__stop_program>:
 2de:	ff cf       	rjmp	.-2      	; 0x2de <__stop_program>
